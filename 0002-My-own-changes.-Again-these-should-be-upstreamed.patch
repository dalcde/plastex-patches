From 80e7d834a40a0c99076a0d9a351076b74abaef0c Mon Sep 17 00:00:00 2001
From: Dexter Chua <dec41@srcf.net>
Date: Sun, 21 Oct 2018 14:49:34 +0100
Subject: [PATCH 2/4] My own changes. Again these should be upstreamed...

---
 overrides/amsmath.py  | 64 +++++++++++++++++++++++++++++++++++++++++++
 overrides/amsthm.py   |  1 +
 overrides/appendix.py |  0
 overrides/enumitem.py |  0
 overrides/euscript.py |  0
 overrides/footmisc.py |  0
 overrides/plastex.py  | 14 ++++++++++
 overrides/tikz-cd.py  |  4 +++
 overrides/tikz.py     |  4 +++
 overrides/titlesec.py |  0
 plasTeX/Context.py    |  3 --
 11 files changed, 87 insertions(+), 3 deletions(-)
 create mode 100644 overrides/amsmath.py
 create mode 100644 overrides/amsthm.py
 create mode 100644 overrides/appendix.py
 create mode 100644 overrides/enumitem.py
 create mode 100644 overrides/euscript.py
 create mode 100644 overrides/footmisc.py
 create mode 100644 overrides/plastex.py
 create mode 100644 overrides/tikz-cd.py
 create mode 100644 overrides/tikz.py
 create mode 100644 overrides/titlesec.py

diff --git a/overrides/amsmath.py b/overrides/amsmath.py
new file mode 100644
index 0000000..1f29e3e
--- /dev/null
+++ b/overrides/amsmath.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python
+
+from plasTeX import Command, Environment
+from plasTeX.Base.LaTeX.Math import MathEnvironment
+
+from plasTeX.Packages.amsmath import *
+
+class AlignStar(MathEnvironment):
+    macroName = 'align*'
+
+    def invoke(self, tex):
+        if self.macroMode == Command.MODE_BEGIN:
+            o = self.ownerDocument.createElement('displaymath')
+            o.macroMode = Command.MODE_BEGIN
+            self.ownerDocument.context.push(o)
+
+            p = self.ownerDocument.createElement('aligned')
+            p.macroMode = Command.MODE_BEGIN
+            self.ownerDocument.context.push(p)
+
+            return [o, p]
+
+        elif self.macroMode == Command.MODE_END:
+            p = self.ownerDocument.createElement('aligned')
+            p.macroMode = Command.MODE_END
+            self.ownerDocument.context.push(p)
+
+            o = self.ownerDocument.createElement('displaymath')
+            o.macroMode = Command.MODE_END
+            self.ownerDocument.context.push(o)
+
+            return [p, o]
+
+class GatherStar(MathEnvironment):
+    macroName = 'gather*'
+
+    def invoke(self, tex):
+        if self.macroMode == Command.MODE_BEGIN:
+            o = self.ownerDocument.createElement('displaymath')
+            o.macroMode = Command.MODE_BEGIN
+            self.ownerDocument.context.push(o)
+
+            p = self.ownerDocument.createElement('gathered')
+            p.macroMode = Command.MODE_BEGIN
+            self.ownerDocument.context.push(p)
+
+            return [o, p]
+
+        elif self.macroMode == Command.MODE_END:
+            p = self.ownerDocument.createElement('gathered')
+            p.macroMode = Command.MODE_END
+            self.ownerDocument.context.push(p)
+
+            o = self.ownerDocument.createElement('displaymath')
+            o.macroMode = Command.MODE_END
+            self.ownerDocument.context.push(o)
+
+            return [p, o]
+
+class aligned(Environment):
+    pass
+
+class gathered(Environment):
+    pass
diff --git a/overrides/amsthm.py b/overrides/amsthm.py
new file mode 100644
index 0000000..a783648
--- /dev/null
+++ b/overrides/amsthm.py
@@ -0,0 +1 @@
+# Empty implementation because built in one is broken
diff --git a/overrides/appendix.py b/overrides/appendix.py
new file mode 100644
index 0000000..e69de29
diff --git a/overrides/enumitem.py b/overrides/enumitem.py
new file mode 100644
index 0000000..e69de29
diff --git a/overrides/euscript.py b/overrides/euscript.py
new file mode 100644
index 0000000..e69de29
diff --git a/overrides/footmisc.py b/overrides/footmisc.py
new file mode 100644
index 0000000..e69de29
diff --git a/overrides/plastex.py b/overrides/plastex.py
new file mode 100644
index 0000000..35f4df1
--- /dev/null
+++ b/overrides/plastex.py
@@ -0,0 +1,14 @@
+from plasTeX import Command, VerbatimEnvironment
+
+class useimager(VerbatimEnvironment):
+    pass
+
+class tph(Command):
+    doCharSubs = False
+
+    # see hyperref.texorpdfstring
+    def invoke(self, tex):
+        tex.readArgument()
+        tex.readArgument()
+        _, source = tex.readArgumentAndSource()
+        self.html = source[1:-1]
diff --git a/overrides/tikz-cd.py b/overrides/tikz-cd.py
new file mode 100644
index 0000000..70fd6fb
--- /dev/null
+++ b/overrides/tikz-cd.py
@@ -0,0 +1,4 @@
+from plasTeX import VerbatimEnvironment
+
+class tikzcd(VerbatimEnvironment):
+    pass
diff --git a/overrides/tikz.py b/overrides/tikz.py
new file mode 100644
index 0000000..df8c96d
--- /dev/null
+++ b/overrides/tikz.py
@@ -0,0 +1,4 @@
+from plasTeX import VerbatimEnvironment
+
+class tikzpicture(VerbatimEnvironment):
+    pass
diff --git a/overrides/titlesec.py b/overrides/titlesec.py
new file mode 100644
index 0000000..e69de29
diff --git a/plasTeX/Context.py b/plasTeX/Context.py
index 698112e..6641c6a 100644
--- a/plasTeX/Context.py
+++ b/plasTeX/Context.py
@@ -941,9 +941,6 @@ class Context(object):
         """
         # Macro already exists
         if name in list(self.keys()):
-            if not issubclass(self[name], (plasTeX.NewCommand, plasTeX.Definition)):
-                if not issubclass(self[name], plasTeX.TheCounter):
-                    return
             macrolog.debug('redefining command "%s"', name)
 
         if nargs is None:
-- 
2.26.1

